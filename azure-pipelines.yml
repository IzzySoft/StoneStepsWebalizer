variables:
  #
  # Intended upcoming app version on this branch. Once a dot-zero version
  # is released, this version should be updated towards the next release.
  #
  # For example, after 6.1.0 is released and a v6-1 branch is created,
  # pipeline YAML on that branch should be changed to use version 6-1-1
  # for bug fixes and version on master should be changed to 6-2-0 or
  # 7-0-0, whichever is planned. Once 6.1.1 is released, pipeline YAML
  # on branch v6-1 should be changed to use version 6-1-2, and so on.
  #
  VERSION: 6-1-0
  BUILD_NUMBER: $[counter(variables.VERSION, 1)]
  
  # without `format` pipeline run label is reported as unevaluated variable names
  VERSION_LABEL: $[format('{0}-{1}', variables.VERSION, variables.BUILD_NUMBER)]

  #
  # All directories are within Azure DevOps agent's workspace directory:
  #
  #   $(Pipeline.Workspace)
  #

  # source checkout directory
  SRC_DIR: $(Build.SourcesDirectory)

  #
  # Makefile build directory for compiled binaries and intermediate object
  # files. Build.BinariesDirectory is not cleaned before a build, unless
  # explicitly requested, like this:
  #
  #   - job: X
  #     workspace:
  #       clean: outputs
  #
  # Make sure different branches and different jobs don't reuse any build
  # files. System.PhaseName is the job name that follows `job:` or `Job1`,
  # `Job2`, etc. for nameless jobs. This pipeline is intended only for x64
  # builds and x64 is not in any directory paths because we don't need to
  # differenciate between x86 and x64.
  #
  BUILD_DIR: $(Build.BinariesDirectory)/webalizer/$(Build.SourceBranchName)/$(System.PhaseName)

  # artifacts staging directory (cleaned automatically before a build)
  ARTIFACT_DIR: $(Build.ArtifactStagingDirectory)

  # test results directory
  TEST_RSLT_DIR: $(Common.TestResultsDirectory)

  # a directory for temporary files (cleaned automatically after each job)
  TMP_DIR: $(Agent.TempDirectory)

#
# Pipeline run label (used only for display purposes in this pipeline)
#
name: $(VERSION_LABEL)

stages:
- stage: BuildPackages
  displayName: Build packages
  jobs:
  - job: Windows
    variables:
      TEST_RSLT_FILE: webalizer_win_test.xml

      # build output for webalizer.exe and test.exe (must end with a slash in all MS Build tasks)
      BIN_OUT_DIR: $(BUILD_DIR)\webalizer
      BIN_INT_DIR: $(BUILD_DIR)\webalizer\obj

      # package intermediate directory must be one level below BIN_OUT_DIR
      PKG_OUT_DIR: $(BUILD_DIR)\package-$(VERSION_LABEL)
      PKG_INT_DIR: $(BIN_OUT_DIR)\package-tmp
  
    pool:
      vmImage: windows-2019

    steps:
    - task: NuGetCommand@2
      displayName: Restore Nuget Packages
      inputs:
        command: 'restore'
        restoreSolution: 'src/webalizer.sln'
        feedsToUse: 'select'
        vstsFeed: 'https://api.nuget.org/v3/index.json'

    - task: MSBuild@1
      displayName: Build
      inputs:
        solution: 'src\webalizer.vcxproj'
        msbuildArchitecture: 'x64'
        platform: 'x64'
        configuration: 'Release'
        msbuildArguments: '/property:OutDir=$(BIN_OUT_DIR)\;IntDir=$(BIN_INT_DIR)\;AZP_BUILD_NUMBER=$(BUILD_NUMBER)'

    - task: MSBuild@1
      displayName: Build Test
      inputs:
        solution: 'src\test\test.vcxproj'
        msbuildArchitecture: 'x64'
        platform: 'x64'
        configuration: 'Release'
        msbuildArguments: '/property:OutDir=$(BIN_OUT_DIR)\test\;IntDir=$(BIN_INT_DIR)\test\obj\'
        
    - script: |
        $(BIN_OUT_DIR)\test\test.exe --gtest_output=xml:$(TEST_RSLT_DIR)/$(TEST_RSLT_FILE)
      displayName: Run Test
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: "JUnit"
        testResultsFiles: '$(TEST_RSLT_FILE)'
        searchFolder: '$(TEST_RSLT_DIR)'

      # create output directory for the package
    - script: |
        mkdir "$(PKG_OUT_DIR)"
      displayName: Create Package Directory

    - task: MSBuild@1
      displayName: Collect Package Files
      inputs:
        solution: 'src\package.vcxproj'
        msbuildArchitecture: 'x64'
        platform: 'x64'
        configuration: 'Release'
        msbuildArguments: '/property:OutDir=$(PKG_OUT_DIR)\;IntDir=$(PKG_INT_DIR)\'

    - task: ArchiveFiles@2
      displayName: Make Package
      inputs:
        rootFolderOrFile: '$(PKG_OUT_DIR)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(ARTIFACT_DIR)/webalizer-win-x64-$(VERSION_LABEL).zip'
        replaceExistingArchive: true

    - publish: '$(ARTIFACT_DIR)/webalizer-win-x64-$(VERSION_LABEL).zip'
      artifact: Windows package

    #
    # Linux
    #
  - job: Linux
    # display name `System.PhaseName + ' ' + System.JobName`
    # System.JobName is Debian, Ubuntu, Fedora
    strategy:
      matrix:
        Debian:
          DIST_NAME: debian
          DIST_ABBR: deb
        Ubuntu:
          DIST_NAME: ubuntu
          DIST_ABBR: ubu
        Fedora:
          DIST_NAME: fedora
          DIST_ABBR: fed

    variables:
      TEST_RSLT_FILE: webalizer_$(DIST_ABBR)_test.xml
      # give each matrix configuration its own build directory
      BUILD_DIST_DIR: $(BUILD_DIR)/$(DIST_NAME)

    pool:
      vmImage: ubuntu-latest
    container: stonesteps/webalizer-$(DIST_NAME):latest

    steps:
    - script: |
        make clean-deps
      displayName: Clean dependencies

    - script: |
        make BLDDIR=$(BUILD_DIST_DIR) AZP_BUILD_NUMBER=$(BUILD_NUMBER)
      displayName: Build

    - script: |
        make BLDDIR=$(BUILD_DIST_DIR) TEST_RSLT_DIR=$(TEST_RSLT_DIR) TEST_RSLT_FILE=$(TEST_RSLT_FILE) test
      displayName: Test  
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: "JUnit"
        testResultsFiles: '$(TEST_RSLT_FILE)'
        searchFolder: '$(TEST_RSLT_DIR)'

    - script: |
        make BLDDIR=$(BUILD_DIST_DIR) PKG_DIR=$(ARTIFACT_DIR) PKG_OS_ABBR=$(DIST_ABBR) PKG_ARCH_ABBR=x64 package
      displayName: Package
    - publish: '$(ARTIFACT_DIR)/webalizer-$(DIST_ABBR)-x64-$(VERSION_LABEL).tar.gz'
      artifact: $(System.JobName) package

    #
    # Doxygen docs
    #
  - job: Doxygen
    variables:
      # generate Doxygen docs in a unique folder per job attempt, which we will remove after archiving
      DOCYGEN_OUTPUT: '$(Build.BinariesDirectory)/webalizer-doxygen/$(System.JobId)'

    pool:
      vmImage: ubuntu-latest
    container: stonesteps/webalizer-fedora-doxygen:latest

    steps:
      # Doxygen can only create one missing directory segment
    - script: >
        mkdir -p $(DOCYGEN_OUTPUT)
      displayName: Create Doxygen output directory

    - script: >
        DOXYGEN_BRANCH=$(Build.SourceBranchName)
        DOXYGEN_INPUT=$(SRC_DIR)/src
        DOXYGEN_OUTPUT=$(DOCYGEN_OUTPUT)
        doxygen $(SRC_DIR)/devops/doxygen.conf
      displayName: Generate Doxygen docs

    - task: ArchiveFiles@2
      displayName: Package Doxygen docs
      inputs:
        rootFolderOrFile: '$(DOCYGEN_OUTPUT)'
        includeRootFolder: false
        archiveType: 'tar'
        tarCompression: 'gz'
        archiveFile: '$(ARTIFACT_DIR)/webalizer-doxygen-$(VERSION_LABEL).tar.gz'
        replaceExistingArchive: true

    - script: >
        rm -rf $(DOCYGEN_OUTPUT)
      displayName: Remove Doxygen output

    - publish: '$(ARTIFACT_DIR)/webalizer-doxygen-$(VERSION_LABEL).tar.gz'
      artifact: Doxygen docs
